add_executable(test_spmv test_spmv.cpp)
target_link_libraries(test_spmv LINK_PUBLIC ${PROJECT_NAME})
add_test(spmv_n1 ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} 1 ${MPIEXEC_PREFLAGS} ./test_spmv)
add_test(spmv_n2 ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} 2 ${MPIEXEC_PREFLAGS} ./test_spmv)

if(USE_DPCPP OR USE_HIPSYCL)
  add_executable(test_spmv_sycl test_spmv_sycl.cpp)
  if(USE_HIPSYCL)
    add_sycl_to_target(TARGET test_spmv_sycl)
  endif()
  target_link_libraries(test_spmv_sycl LINK_PUBLIC ${PROJECT_NAME})
  add_test(spmv_n3 ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} 1 ${MPIEXEC_PREFLAGS} ./test_spmv_sycl)
  add_test(spmv_n4 ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} 2 ${MPIEXEC_PREFLAGS} ./test_spmv_sycl)
elseif(USE_OPENMP_OFFLOAD)
  add_executable(test_spmv_openmp_offload test_spmv_openmp_offload.cpp)
  target_link_libraries(test_spmv_openmp_offload LINK_PUBLIC ${PROJECT_NAME})
  add_test(spmv_n3 ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} 1 ${MPIEXEC_PREFLAGS} ./test_spmv_openmp_offload)
  add_test(spmv_n4 ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} 2 ${MPIEXEC_PREFLAGS} ./test_spmv_openmp_offload)
elseif(USE_CUDA)
  add_executable(test_spmv_cuda test_spmv_cuda.cpp)
  target_link_libraries(test_spmv_cuda LINK_PUBLIC ${PROJECT_NAME})
  target_link_libraries(test_spmv_cuda PRIVATE CUDA::cublas)
  add_test(spmv_n3 ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} 1 ${MPIEXEC_PREFLAGS} ./test_spmv_cuda)
  add_test(spmv_n4 ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} 2 ${MPIEXEC_PREFLAGS} ./test_spmv_cuda)
endif()

if(OpenMP_CXX_FOUND AND USE_OPENMP)
  set_tests_properties(spmv_n1 spmv_n2 PROPERTIES ENVIRONMENT "OMP_NUM_THREADS=2")
endif()
if(OpenMP_CXX_FOUND AND USE_HIPSYCL)
  set_tests_properties(spmv_n3 spmv_n4 PROPERTIES ENVIRONMENT "OMP_NUM_THREADS=2")
endif()
if(USE_DPCPP)
  set_tests_properties(spmv_n3 spmv_n4 PROPERTIES ENVIRONMENT "DPCPP_CPU_NUM_CUS=2")
endif()
